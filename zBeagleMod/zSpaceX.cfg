
@PART[KK_SPX_FalconGridfin]:FINAL
{
	@dragModelType = default
	@maximum_drag = 1
	@minimum_drag = 0
	@angularDrag = 2

	%DRAG_CUBE
	{
	  //cube = A, 0.2,1,1.1, 0.2,1,1.2, 0.3,0.7,0.4, 0.3,0.7,0.4, 0.2,0.8,0.5, 0.2,0.8,0.5, 0.55,0,0, 1.1,0.5,0.9
		cube = A, 0.2,1,1.1, 0.2,1,1.2, 7,0.7,0.4, 7,0.7,0.4, 0.2,0.8,0.5, 0.2,0.8,0.5, 0.55,0,0, 1.1,0.5,0.9 
	  //cube = B, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0
		cube = B, 0.3955,0.7837,0.3392, 0.392,0.7864,0.3659, 0.1428,0.8672,1.093, 0.1428,0.7643,1.316, 0.2121,0.8256,0.5232, 0.2121,0.8259,0.5232, 0.1445,0.3803,9.835E-07, 0.3242,1.221,0.8506
	}
	
	%MODULE
	{
		name = ModuleAnimateGeneric
		animationName = NewFinsDeploy
		actionGUIName = Toggle Fins
		startEventGUIName = Extend Fins
		endEventGUIName = Retract Fins
		defaultActionGroup = Brakes
	}
	
	%MODULE
	{
		name = ModuleControlSurface
		useInternalDragModel = True
		dragCoeff = 0.65
		deflectionLiftCoeff = 0.2
		ctrlSurfaceRange = 35
		ctrlSurfaceArea = 0.9
		actuatorSpeed = 40
		transformName = Pivot
	}
		
	%MODULE
	{
		name = ModuleDeployableAero
		DeployModuleIndex = 0 //Index of module implementing IScalarModule
		DeployModulePos = 1 //Position (0 or 1) of animation considered deployed. Part spawns at 0.
	}
	
}


@PART[KK_SPX_FalconGridfin_FT]:FINAL
{
	@dragModelType = default
	@maximum_drag = 1
	@minimum_drag = 0
	@angularDrag = 2

	%DRAG_CUBE
	{
	  //cube = A, 0.2,1,1.1, 0.2,1,1.2, 0.3,0.7,0.4, 0.3,0.7,0.4, 0.2,0.8,0.5, 0.2,0.8,0.5, 0.55,0,0, 1.1,0.5,0.9
		cube = A, 0.2,1,1.1, 0.2,1,1.2, 7,0.7,0.4, 7,0.7,0.4, 0.2,0.8,0.5, 0.2,0.8,0.5, 0.55,0,0, 1.1,0.5,0.9 
	  //cube = B, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0
		cube = B, 0.3955,0.7837,0.3392, 0.392,0.7864,0.3659, 0.1428,0.8672,1.093, 0.1428,0.7643,1.316, 0.2121,0.8256,0.5232, 0.2121,0.8259,0.5232, 0.1445,0.3803,9.835E-07, 0.3242,1.221,0.8506
	}
	
	%MODULE
	{
		name = ModuleAnimateGeneric
		animationName = NewFinsDeploy
		actionGUIName = Toggle Fins
		startEventGUIName = Extend Fins
		endEventGUIName = Retract Fins
		defaultActionGroup = Brakes
	}
	
	%MODULE
	{
		name = ModuleControlSurface
		useInternalDragModel = True
		dragCoeff = 0.65
		deflectionLiftCoeff = 0.2
		ctrlSurfaceRange = 35
		ctrlSurfaceArea = 0.9
		actuatorSpeed = 40
		transformName = Pivot
	}
		
	%MODULE
	{
		name = ModuleDeployableAero
		DeployModuleIndex = 0 //Index of module implementing IScalarModule
		DeployModulePos = 1 //Position (0 or 1) of animation considered deployed. Part spawns at 0.
	}
	
}

@PART[KK.SPX.F9.Octaweb]:FINAL
{
	///%skinMaxTemp = 1600
	%skinThermalMassModifier = 0.4
	%emissiveConstant = 0.95
}

@PART[KK.SPX.F93.S1tank]:FINAL
{
	@modMass = 0
	///%skinMaxTemp = 1400
	%skinThermalMassModifier = 0.9
	%emissiveConstant = 0.9
}

@PART[KK.SPX.F9LandingLeg]:FINAL
{
	///%skinMaxTemp = 1400
	%skinThermalMassModifier = 0.8
	%emissiveConstant = 0.9
}

///thermalMassModifier = multiplier applied to the part's thermal mass. (the higher thermal mass is, the more energy it takes to heat it up one degree. High thermal mass is good for heat sinks. Low mass means that heat loss through radiation has more impact. This is how the shuttle's tiles worked)
///heatConductivity = heat transfer between parts (part.temperature <-> part.temperature)
//emissiveConstant = a multiplier to radiation, both incoming and outgoing. High emissive means it takes more heat from incoming thermal radiation, but it also means it is a good radiator. This is why radiators are often black. (white painted radiators such as the ISS uses are good reflectors in the visible range but good radiators in the IR range. KSP does not simulate scenarios such as this). (The basic formula for radiation is temperature^4 * surface area * Boltzmann-Stefan constant)

///skinInternalConductionMult = multiplier applied to conduction from a part's skin to its internal (skin.temperature <-> part.temperature)
///skinSkinConductionMult = multiplier applied to conduction between two attached parts from skin to skin (skin1.temperature <-> skin2.temperature)
///skinMaxTemp = skin temperature higher than this destroys the part. If this field is not provided then the part's maxTemp is used.
///skinMassPerArea = another multiplier applied to skin thermal mass.
///radiatorMax = This percentage of the part's maxTemp is used by active radiators to determine when they should start sucking heat out of the part
///radiatorHeadroom = Also used by radiator parts but I'm not clear how... I think it applies only to the radiator part to determine how close it is allowed to get to its own maxTemp


